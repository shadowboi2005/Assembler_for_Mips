Goals of the project:
    Convert the Assembly Code(MIPS) into machine code. (also calculating the offsets for instructions like branch and jump).
    create a symbol table and relocation table. 

the instructions i am going to consider are

beq,bne,j,jal,jr,lw,sw,add,addi,sub,ori,li,lui,la,syscall,sll,srl,slt

Input 

The input files will be MIPS assembly programs in ASCII text. The assembly programs will be syntactically correct, 
compatible with the MARS MIPS simulator, and restricted to the subset of the MIPS32 instruction set defined above. 
Example programs will be available from the course website. 

Each line in the input assembly file will contain either an assembly instruction, a section header directive (such as .data) 
or a label (a jump or branch target). The maximum length of a line is 256 bytes. 

Your input file may also contain comments. Any text after a ‘#’symbol is a comment and should be discarded by your 
assembler. Section header directives, such as .data and .text will be in a line by themselves. Similarly, labels (such as 
loop:) will be on a line by themselves. The input assembly file will only contain one data section and one text section. 
The first section in the file will be the data section, followed by the text section. 

Your assembler can be invoked in the following ways: 

assemble <input file> <output file> 
assemble –symbols <input file> <output file> 
assemble –list <input file> <output file> 


The specified input file must already exist; if not, your program should exit gracefully with an error message to the console 
window. The specified output file may or may not already exist; if it does exist, the contents should be overwritten. 

Version 2.0. 


Output 
Output when invoked as: assemble <input file> <output file> 


Your assembler will resolve all references to branch targets in the .text section and variables in the .data section and convert 
the instructions in the .text section into machine code. 

To convert an instruction into machine code follow the instruction format rules specified in the class textbook. For each 
format (R-format, I-format or J-format), you should determine the opcode that corresponds to instruction, the values for the 
register fields and any optional fields such as the function code and shift amount fields for arithmetic instructions (R-
format) and immediate values for I-format instructions. 

The output machine code should be saved to the output file specified in the command line. The output file should contain 
the machine code corresponding to instructions from the .textsection followed by a blank line followed by variables 
from the .datasection in human readable binary format (0s and 1s). For example to represent the decimal number 40in 
16-bit binary you would write 0000000000101000, and to represent the decimal number -40 in 16-bit binary you would 
write 1111111111011000. 

The output file is a text file, not a binary file; that’s a concession to the need to evaluate your results. 

Your output file should match the machine file generated by the MARS simulator version 4.4 (see following section). A 
sample showing the assembler’s translation of the adder.asmprogram is given at the end of this specification. 

Output when invoked as: assemble –symbols <input file> <output file> 

Your assembler will write (to the specified output file) a well-formatted table, listing every symbolic name used in the 
MIPS32 assembly code and the address that corresponds to that label. Addresses will be written in hex. 

Note that MARS makes the following assumptions about addresses: 

• The base address for the text segment is 0x40000000, so that’s the address of the first machine instruction. 
• The base address of the data segment is 0x00002000, so that’s the address of the first thing declared in the data 
  segment. 
  
The second fact above implies that the text segment cannot be longer than 8 KiB or 2048 machine instructions. You don’t 
need to do anything special about that fact. 

Output when invoked as: assemble –list <input file> <output file>* 

Your assembler will translate the assembly program as when invoked with no switch (i.e., as described in the first output 
description above). Your assembler will then write a listing file with the following format: 

For each machine instruction in the text segment, write a single line containing the address, machine instruction, and 
assembly instruction on the same line. For pseudo-instructions, show the original assembly instruction in the listing. For 
pseudo-instruction translations that result in “extra” machine instructions, such as blt, write a separate line for each 
“extra” instruction. Write labels that correspond to instructions in the text segment on the line before the corresponding 
instruction. Write a single blank line after the text segment listing. 

For each variable declared in the data segment, write the variable name (label) followed by a colon on a line, then write the 
address and corresponding data content, one 32-bit word per line. Write a single blank line after the data segment listing. 

Sample output files are given later in this specification. 


What i want to do is first strip the files of the comments and newlines.

